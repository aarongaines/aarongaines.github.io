[
  {
    "objectID": "skill_demos/arcpy/arcpy_rest_dem.html",
    "href": "skill_demos/arcpy/arcpy_rest_dem.html",
    "title": "Using Arcpy to Automate GIS Tasks",
    "section": "",
    "text": "Below is an example of using Python and the Arcpy library to download Digital Elevation Models (DEMs) from the USGS website using their API. This is done by Hydrologic Unit Code (HUC) 8 in this example. Where 8 is the number of digits in the HUC code, the more numbers the smaller the HUC area, the smallest being HUC12.\nOnce the DEMs in the desired area are downloaded, ArcPy is used to mosaik the DEMs into a single raster, and then clips them using the HUC 8 boundary."
  },
  {
    "objectID": "skill_demos/arcpy/arcpy_rest_dem.html#introduction",
    "href": "skill_demos/arcpy/arcpy_rest_dem.html#introduction",
    "title": "Using Arcpy to Automate GIS Tasks",
    "section": "",
    "text": "Below is an example of using Python and the Arcpy library to download Digital Elevation Models (DEMs) from the USGS website using their API. This is done by Hydrologic Unit Code (HUC) 8 in this example. Where 8 is the number of digits in the HUC code, the more numbers the smaller the HUC area, the smallest being HUC12.\nOnce the DEMs in the desired area are downloaded, ArcPy is used to mosaik the DEMs into a single raster, and then clips them using the HUC 8 boundary."
  },
  {
    "objectID": "skill_demos/arcpy/arcpy_rest_dem.html#importing-libraries",
    "href": "skill_demos/arcpy/arcpy_rest_dem.html#importing-libraries",
    "title": "Using Arcpy to Automate GIS Tasks",
    "section": "Importing Libraries",
    "text": "Importing Libraries\nIn order to use arcpy, one must have ArcGIS installed on their computer, and have recently logged into an ArcGIS account. This is because the ArcPy library is a part of the ArcGIS software.\n\nimport json\nimport requests\nimport pandas as pd\nimport os\nimport arcpy"
  },
  {
    "objectID": "skill_demos/arcpy/arcpy_rest_dem.html#downloading-dems",
    "href": "skill_demos/arcpy/arcpy_rest_dem.html#downloading-dems",
    "title": "Using Arcpy to Automate GIS Tasks",
    "section": "Downloading DEMs",
    "text": "Downloading DEMs\n\nSet Parameters and Make Request\nHere we setup the parameters for our workspace, including the HUC 8 code, the output directory, and the output file name as well as the basis for the USGS API URL. We also make our initial request to the USGS API to get the list of DEMs in the HUC 8 area.\n\ns_url = 'https://tnmaccess.nationalmap.gov/api/v1/products?datasets='\ndataset = 'National Elevation Dataset (NED) 1/3 arc-second'\npolyCode = input('Enter HUC8: ')\npolyType = 'huc8'\n\nurl = s_url + dataset + '&polyCode=' + polyCode + '&polyType=' + polyType\nsp = 'dem\\\\'+ polyCode\n\nos.makedirs(sp, exist_ok=True)\n\nr = requests.get(url)\ndata = r.json()\n\n\n\nDownload the DEMs\nThis next portion of code is used to download the DEMs from the USGS API. First we create an output directory, then We iterate through the list of DEMs and download them to it.\n\nfor i in data.get('items'):\n\n    url = i.get('downloadURL')\n    fname = url.split('/')[-1]\n    spath = sp + '/' + fname\n\n    if os.path.exists(spath):\n        print('Already exists: ' + fname)\n        continue\n    \n    else:\n        print('Downloading: ' + fname)\n        r = requests.get(url)\n        open(spath, 'wb').write(r.content)"
  },
  {
    "objectID": "skill_demos/arcpy/arcpy_rest_dem.html#huc-8-boundary",
    "href": "skill_demos/arcpy/arcpy_rest_dem.html#huc-8-boundary",
    "title": "Using Arcpy to Automate GIS Tasks",
    "section": "HUC 8 Boundary",
    "text": "HUC 8 Boundary\nHere we are retriving the HUC 8 boundary from our workspace directory. This will be used to clip the DEMs.\n\nwdb_path = sp + '\\\\' + polyCode + '_wbd.shp'\n\nwd = os.getcwd()\nwd += '\\\\' + 'wbd'\n\narcpy.env.workspace = wd\narcpy.env.overwriteOutput = True\n\nif os.path.exists(wdb_path):\n    print('Already exists: ' + wdb_path)\n\nelse:\n    print(f'Exporting WDB HUC8 for {polyCode}')\n    huc8 = f\"huc8 = '{polyCode}'\"\n    arcpy.conversion.ExportFeatures(\"CA_WBD_HU8\", wdb_path,\n        huc8,\n        \"NOT_USE_ALIAS\",\n        'tnmid \"tnmid\" true true false 40 Text 0 0,First,#,CA_WBD_HU8,tnmid,0,40;metasource \"metasource\" true true false 40 Text 0 0,First,#,CA_WBD_HU8,metasource,0,40;sourcedata \"sourcedata\" true true false 100 Text 0 0,First,#,CA_WBD_HU8,sourcedata,0,100;sourceorig \"sourceorig\" true true false 130 Text 0 0,First,#,CA_WBD_HU8,sourceorig,0,130;sourcefeat \"sourcefeat\" true true false 40 Text 0 0,First,#,CA_WBD_HU8,sourcefeat,0,40;loaddate \"loaddate\" true true false 8 Date 0 0,First,#,CA_WBD_HU8,loaddate,-1,-1;referenceg \"referenceg\" true true false 50 Text 0 0,First,#,CA_WBD_HU8,referenceg,0,50;areaacres \"areaacres\" true true false 19 Double 0 0,First,#,CA_WBD_HU8,areaacres,-1,-1;areasqkm \"areasqkm\" true true false 19 Double 0 0,First,#,CA_WBD_HU8,areasqkm,-1,-1;states \"states\" true true false 50 Text 0 0,First,#,CA_WBD_HU8,states,0,50;huc8 \"huc8\" true true false 8 Text 0 0,First,#,CA_WBD_HU8,huc8,0,8;name \"name\" true true false 120 Text 0 0,First,#,CA_WBD_HU8,name,0,120;shape_Leng \"shape_Leng\" true true false 19 Double 0 0,First,#,CA_WBD_HU8,shape_Leng,-1,-1;ObjectID \"ObjectID\" true true false 10 Long 0 10,First,#,CA_WBD_HU8,ObjectID,-1,-1;Shape_Le_1 \"Shape_Le_1\" true true false 19 Double 0 0,First,#,CA_WBD_HU8,Shape_Le_1,-1,-1;Shape_Area \"Shape_Area\" true true false 19 Double 0 0,First,#,CA_WBD_HU8,Shape_Area,-1,-1',\n        None)"
  },
  {
    "objectID": "skill_demos/arcpy/arcpy_rest_dem.html#mosaic",
    "href": "skill_demos/arcpy/arcpy_rest_dem.html#mosaic",
    "title": "Using Arcpy to Automate GIS Tasks",
    "section": "Mosaic",
    "text": "Mosaic\nIn the following cell, we are using ArcPy to gather the list of DEMs in our workspace directory and then create a mosaic of them all. While in many modern GIS this step may not be neccesary as rasters can be displayed and processed on the fly, for this scriptâ€™s application in ArcMap this is not the case.\n\nwd = os.getcwd()\nwd += \"\\\\\" + sp\n\narcpy.env.workspace = wd\narcpy.env.overwriteOutput = True\n\nrasters = arcpy.ListRasters()\n\nfname = polyCode + \"_mosaic.tif\"\nfpath = wd + '\\\\' + fname\n\nif os.path.exists(fname):\n    print('Already exists: ' + fname)\n\nelse:\n    print('Mosaicking: ' + fname)\n    with arcpy.EnvManager(resamplingMethod=\"BILINEAR\", pyramid=\"PYRAMIDS -1 BILINEAR DEFAULT 75 NO_SKIP NO_SIPS\"):\n        arcpy.management.MosaicToNewRaster(rasters, wd, fname, None, \"32_BIT_FLOAT\", None, 1, \"MEAN\", \"FIRST\")"
  },
  {
    "objectID": "skill_demos/arcpy/arcpy_rest_dem.html#clip",
    "href": "skill_demos/arcpy/arcpy_rest_dem.html#clip",
    "title": "Using Arcpy to Automate GIS Tasks",
    "section": "Clip",
    "text": "Clip\nNow that we have the HUC 8 boundary and the mosaiked DEM, we can clip the DEM to the boundary.\n\nprint('Clipping: ' + fname)\nwith arcpy.da.SearchCursor(arcpy.ListFeatureClasses()[0], ['Shape@']) as rows:\n    for row in rows:\n        extent = row[0].extent.XMin, row[0].extent.YMin, row[0].extent.XMax, row[0].extent.YMax\n        extent = str(extent).replace('(', '').replace(')', '').replace(',', '')\n\ncpath = wd + '\\\\' + polyCode + '_mclip.tif'\n\nwith arcpy.EnvManager(resamplingMethod=\"BILINEAR\", pyramid=\"PYRAMIDS -1 BILINEAR DEFAULT 75 NO_SKIP NO_SIPS\"):\n    arcpy.management.Clip(fname, extent, cpath, wdb_path, \"3.4e+38\", \"ClippingGeometry\", \"NO_MAINTAIN_EXTENT\")\n\nprint('Completed: ' + cpath)"
  },
  {
    "objectID": "skill_demos/arcpy/arcpy_rest_dem.html#conclusion",
    "href": "skill_demos/arcpy/arcpy_rest_dem.html#conclusion",
    "title": "Using Arcpy to Automate GIS Tasks",
    "section": "Conclusion",
    "text": "Conclusion\nIn this notebook, we used Python and ArcPy to download DEMs from the USGS website using their REST API. We then mosaiked the DEMs into a single raster, and clipped them to the HUC 8 boundary. The purpose of this was to create a DEM for a specific area that can be used in hydrologic modeling. In practice it was used to more quickly setup a GIS environment for digitizing hydrologic features.\nBelow is an example of the output of this notebook:"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Aaron Gaines",
    "section": "",
    "text": "GIS Technician with 4 years experience | ArcGIS Products, QGIS | Python, SQL"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Aaron Gaines",
    "section": "Education",
    "text": "Education\nB.A. Geography - Geographic Information Science | California State University, Northridge\nGraduate Certificate Data Science | UCLA Extension\nA.S. Land Survey | College of the Canyons"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Aaron Gaines",
    "section": "Experience",
    "text": "Experience\nGIS Research Assistant | California State University, Northridge | Aug 2021 - Sept 2023\nGIS Intern | California State University, Northridge | Oct 2019 - Sept 2021"
  },
  {
    "objectID": "index.html#projects",
    "href": "index.html#projects",
    "title": "Aaron Gaines",
    "section": "Projects",
    "text": "Projects\n\nBioluminescent Algal Blooms\nFocused on using remote sensing data from the JAXA SGLI/GCOM satelite to identify bioluminescent algal blooms off of the coast of Southern California. The project page currently has has an interactive map that automatically updates everyday showing the most recent 5 days of likley bioluminescent algal blooms.\n\n\nDownloading and Processing Data with Python using REST API and ArcPy\nUses Python to interact with the USGS REST API to download 10m digital elevation models (DEM) in user defined watershed boundary, also known as a hydrologic unit code (HUC), combine them into a single mosaic file, and then clip the mosaic to said HUC to create a single output DEM for the defined area."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Aaron Gaines",
    "section": "",
    "text": "GIS Technician with 4 years experience | ArcGIS Products, QGIS | Python, SQL"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Aaron Gaines",
    "section": "Education",
    "text": "Education\nB.A. Geography - Geographic Information Science | California State University, Northridge\nA.S. Land Survey | College of the Canyons"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Aaron Gaines",
    "section": "Experience",
    "text": "Experience\nResearch Assistant/GIS Tech | California State University, Northridge | Sept 2021 - Sept 2023\nGIS Intern | California State University, Northridge | Oct 2019 - Sept 2021"
  },
  {
    "objectID": "portfolio.html",
    "href": "portfolio.html",
    "title": "Portfolio",
    "section": "",
    "text": "Focused on using remote sensing data from the JAXA SGLI/GCOM satelite to identify bioluminescent algal blooms off of the coast of Southern California. The project page currently has has an interactive map that automatically updates everyday showing the most recent 5 days of likley bioluminescent algal blooms.\n\n\n\nUses Python to interact with the USGS REST API to download 10m digital elevation models (DEM) in user defined watershed boundary, also known as a hydrologic unit code (HUC), combine them into a single mosaic file, and then clip the mosaic to said HUC to create a single output DEM for the defined area."
  },
  {
    "objectID": "portfolio.html#projects",
    "href": "portfolio.html#projects",
    "title": "Portfolio",
    "section": "",
    "text": "Focused on using remote sensing data from the JAXA SGLI/GCOM satelite to identify bioluminescent algal blooms off of the coast of Southern California. The project page currently has has an interactive map that automatically updates everyday showing the most recent 5 days of likley bioluminescent algal blooms.\n\n\n\nUses Python to interact with the USGS REST API to download 10m digital elevation models (DEM) in user defined watershed boundary, also known as a hydrologic unit code (HUC), combine them into a single mosaic file, and then clip the mosaic to said HUC to create a single output DEM for the defined area."
  }
]